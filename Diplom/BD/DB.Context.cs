//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Diplom.BD
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AddInformation> AddInformation { get; set; }
        public virtual DbSet<BusinessTrip> BusinessTrip { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Education> Education { get; set; }
        public virtual DbSet<EducationWorker> EducationWorker { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<MedicalExamination> MedicalExamination { get; set; }
        public virtual DbSet<Post> Post { get; set; }
        public virtual DbSet<Price> Price { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TypeEducation> TypeEducation { get; set; }
        public virtual DbSet<TypeFooting> TypeFooting { get; set; }
        public virtual DbSet<Vacation> Vacation { get; set; }
        public virtual DbSet<Worker> Worker { get; set; }
        public virtual DbSet<WorkerPost> WorkerPost { get; set; }
        public virtual DbSet<vm_WorkerBusinessTrip> vm_WorkerBusinessTrip { get; set; }
        public virtual DbSet<vw_Post> vw_Post { get; set; }
        public virtual DbSet<vw_WorkerVocation> vw_WorkerVocation { get; set; }
    
        [DbFunction("Entities", "fn_SalaryForMoth")]
        public virtual IQueryable<fn_SalaryForMoth_Result> fn_SalaryForMoth()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_SalaryForMoth_Result>("[Entities].[fn_SalaryForMoth]()");
        }
    
        [DbFunction("Entities", "func_EducationWorker")]
        public virtual IQueryable<func_EducationWorker_Result> func_EducationWorker()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<func_EducationWorker_Result>("[Entities].[func_EducationWorker]()");
        }
    
        public virtual ObjectResult<Nullable<int>> pr_Exp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("pr_Exp");
        }
    
        public virtual ObjectResult<pr_SalaryForMoth_Result> pr_SalaryForMoth()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<pr_SalaryForMoth_Result>("pr_SalaryForMoth");
        }
    
        public virtual int proc_DismissWorker(string passS, string passN, Nullable<System.DateTime> dateOfDismiss, string reason)
        {
            var passSParameter = passS != null ?
                new ObjectParameter("PassS", passS) :
                new ObjectParameter("PassS", typeof(string));
    
            var passNParameter = passN != null ?
                new ObjectParameter("PassN", passN) :
                new ObjectParameter("PassN", typeof(string));
    
            var dateOfDismissParameter = dateOfDismiss.HasValue ?
                new ObjectParameter("DateOfDismiss", dateOfDismiss) :
                new ObjectParameter("DateOfDismiss", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_DismissWorker", passSParameter, passNParameter, dateOfDismissParameter, reasonParameter);
        }
    
        public virtual int proc_HiringWorker(string passS, string passN, Nullable<System.DateTime> dateOfStart, string reason)
        {
            var passSParameter = passS != null ?
                new ObjectParameter("PassS", passS) :
                new ObjectParameter("PassS", typeof(string));
    
            var passNParameter = passN != null ?
                new ObjectParameter("PassN", passN) :
                new ObjectParameter("PassN", typeof(string));
    
            var dateOfStartParameter = dateOfStart.HasValue ?
                new ObjectParameter("DateOfStart", dateOfStart) :
                new ObjectParameter("DateOfStart", typeof(System.DateTime));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_HiringWorker", passSParameter, passNParameter, dateOfStartParameter, reasonParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
